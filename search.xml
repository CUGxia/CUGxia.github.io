<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[pymongo 使用记录]]></title>
    <url>%2F2018%2F06%2F21%2Fpymongo-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[pymongo 使用过程中的坑0x0 Question 1: 插入自动生成 _id123db.collection.insert(array)db.collection.insert_one(array)db.collection.insert_many(array) 均会使 array 生成 mongodb 中的自增 ObjectId ，且使用 12for row in array: del row['_id'] 无法进行删除!造成后续更新过程中的困扰。 Solution由于 python 在传参过程中属于地址传递，所以会造成上述问题。可使用copy.deepcopy()生成副本后再进行插入操作。 12345678910111213141516171819...import copyarray=[ &#123; 'name':'张三', 'age':10 &#125;, &#123; 'name':'李四', 'age':16 &#125;]try: iArray=copy.deepcopy(array) db.collection.insert(iArray)except Exception as eBatchInsert: # 其它操作，如单条插入或者单条更新等 pass... 这样可以避免 array 中由于插入操作生成 _id 字段，导致后期更新等出现问题。]]></content>
      <categories>
        <category>Code</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pymongo</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis学习记录]]></title>
    <url>%2F2018%2F03%2F16%2FRedis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[Redis 学习记录​ 由于业务需要，最近需要学习 Redis，处理相关业务。以此文写下学习过程。 Key12345678910111213141516SET user_name 'Jack Smith' // 设置 user_name 的值为 Jack SmithDEL user_name // 删除 user_nameDUMP user_name // 序列化给定 user_name，返回序列化后的值(转为\xFFFF,16进制表示)EXISTS user_name // 检查 user_name 是否存在KEYS user_* // 获取所有以 user_ 开头的键名SELECT 1 // 选择1号数据库MOVE name 0 // name 键移到0数据库EXPIRE user_name 60 // 设置 user_name 在 60 秒后失效EXPIREAT user_name 1555555555005 // 设置过期时间戳PERSIST name // 移除过期时间TTL name // 返回 name 键的过期时间,以秒为单位PTTL name // 返回 name 健的过期时间，以毫秒为单位RANDOMKEY //从当前数据库随机返回一个 keyRENAME key_name new_name // 修改键字RENAMENX key_name new_name // 仅当 new_name 不存在时才重命名TYPE key_name // 返回该 key 的存储类型]]></content>
      <categories>
        <category>Code</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>学习记录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Laravel 5.6 学习记录]]></title>
    <url>%2F2018%2F03%2F05%2FLaravel%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[Laravel 5.6学习记录官方文档准备工作项目新建composer 方案创建名为 laravel.local 的项目，laravel 版本为 5.6.7。 1composer create-project laravel/laravel=5.6.7 laravel.local --prefer-dist laravel 方案本地先安装 Laravel 安装器 1composer global require "laravel/installer" 再转到想要安装的路径下，即可新建项目名称为 blog.local 的 Laravel 项目 1laravel new blog.local 修改环境文件(.env)1234DB_HOST=localhostDB_DATABASE=laravelDB_USERNAME=mysql_localDB_PASSWORD=mysql_local 安装 Laraver IDE 助手安装教程 本地快捷调试1php artisan serve 开启在 http://localhost:8000 的调试。 章节学习1. 配置相关维护模式当线上服务需要进入维护，可进入维护模式，所有请求将返回 503 状态码并抛出MaintenanceModeException 异常。 1php artisan down 同时可以设置维护提示消息，并加入 Retry-After HTTP头信息。 1php artisan down --message="Upgrading Database" --retry=60 重新上线。 1php artisan up 如需要修改 503 页面样式，可进入rescourse/views/errors/502.blade.php修改。 将 storage/app/public 链接到 public/sstorage1php artisan storage:link 线上部署线上部署教程 2. 视图]]></content>
      <categories>
        <category>Code</category>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>学习记录</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件名批量提取工具介绍及使用教程]]></title>
    <url>%2F2018%2F02%2F28%2F%E6%96%87%E4%BB%B6%E5%90%8D%E6%89%B9%E9%87%8F%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言之前在网络中心远教上班，经常会对下载的文件进行统计分析与核对，时常需要对文件名进行提取，原先用的都是bat批处理进行提取，后发现无法满足某些需求。故做此开发。 软件下载下载地址 软件UI 使用教程该软件简单易用，主要可选功能有: 导出模式：控制是否对子文件夹进行递归扫描并导出 导出类型：选择需要导出的文件类型(文件后缀判断，可多选) 导出格式：导出文件中是否带文件路径/后缀 后记该软件开发完成后我已经不在远教做助教了。所以也没有太用上，放在网络上给需要的朋友行个方便吧~]]></content>
      <categories>
        <category>Code</category>
        <category>Qt5</category>
      </categories>
      <tags>
        <tag>Qt5</tag>
        <tag>实用工具</tag>
        <tag>文件名提取</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win7x64 下 redis 的安装]]></title>
    <url>%2F2018%2F02%2F11%2Fwin7x64%E4%B8%8Bredis%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[前言近期项目需要使用 redis, 故在本地安装以便测试。 下载redis 官方没有适配 windows 平台，但 MicrosoftArchive 在 github 上有安装包。github 下载地址本地为win7x64系统，故下载的 Redis-x64-3.2.100.msi可能需要科学上网。 安装按步骤开始安装安装完成后，检查系统服务中是否有 Redis，若有则说明已经成功安装。 测试在 Redis 安装目录下，输入1redis-cli.exe -h 127.0.0.1 -p 6379 测试 Redis ，测试结果。 可视化管理Redis 可视化管理工具推荐 redis-desktop-manager下载 Windows 版本并安装，配置 ip 和端口完成后即可对 Redis 键值进行可视化管理！ 后记至此本地环境已搭建完成！后面可能会较多用到 Redis 进行项目开发，近期需要熟悉。]]></content>
      <categories>
        <category>Code</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CI框架常用数据库操作技巧]]></title>
    <url>%2F2018%2F01%2F28%2FCI%E6%A1%86%E6%9E%B6%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[前言近期在CI框架下开发了多个项目(准确说是接盘哈哈)，在增改删查中也学习了不少的小技能~留下以后备查~ 数据库增改删查作为最基本的数据库操作，写起来代码冗余。等我琢磨一下看能不能封装一层 Model ，减去这些冗余的操作。 查询分页在对大量数据进行查询时，经常要用到分页查询操作。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public function get($param1 = null, $param2 = null, $param3 = null, $order_by = null, $direction = 'DESC', $page_size = 30, $page_index = 1)&#123; //表名 $table_name='database_table_1'; /* * 筛选条件,可根据需求进行调整 */ if ($param1) &#123; $this-&gt;db-&gt;where('param1', $param1); &#125; if ($param2) &#123; $this-&gt;db-&gt;where('param2', $param2); &#125; if ($param3) &#123; $this-&gt;db-&gt;like('param3', $param3); &#125; //排序 if ($order_by) &#123; if (!$this-&gt;db-&gt;field_exists($order_by,$table_name)) &#123; //字段不存在 $this-&gt;msg = '该筛选字段不存在'; $this-&gt;code = 10022; return false; &#125; else &#123; $this-&gt;db-&gt;order_by($order_by, $direction == null ? 'DESC' : $direction); &#125; &#125; //统计总条数 $result_nums = $this-&gt;db-&gt;count_all_results($table_name,false); $page_size = intval($page_size); //分页 $page_index = intval($page_index); $limit = 0; $offset = 30; if ($page_index &gt;= 1) &#123; $offset = ($page_index - 1) * $page_size; $limit = $page_size; &#125; $this-&gt;db-&gt;limit($limit, $offset); $query = $this-&gt;db-&gt;get(); $result = $query-&gt;result_array(); //重组返回结果 $result_new = array(); if ($result) &#123; $this-&gt;msg = '查到相关记录'; $this-&gt;code = 0; $result_new['page_index'] = $page_index; $result_new['page_size'] = $page_size; $result_new['count'] = $result_nums; $result_new['records'] = $result; &#125; else &#123; $this-&gt;msg = '未查到相关记录！'; $this-&gt;code = 10023; return false; &#125; return $result_new;&#125; 只需要稍微修改 $table_name 以及相关参数，就能完成筛选、排序和分页等操作。 批量更新当有大部分数据需要进行同步时，考虑到效率问题以及相关的操作复杂度。最初我用的自己构造的sql语句进行操作，但效率很低，而且很繁琐。原sql语句：1SET name= CASE mobile WHEN '16688889999' THEN '小明' WHEN '19966665555' THEN '小红'...END 但是效率低、构造困难。后发现 CI 自带批量更新。官方文档 1234567891011121314151617181920//需求,已知 mobile，从其他接口查询到 name 和 department，需要同步到本地。$data=array( array( 'name'='小明', 'mobile'='16688889999', 'department'=&gt;'信息部' ), array( 'name'='小红', 'mobile'='19966665555', 'department'=&gt;'体育部' ), array( 'name'='小张', 'mobile'='16536556986', 'department'=&gt;'科技部' ));//以 mobile 为条件,当 mobile 与原表中的某行的 mobile 字段数值对应时，更新 name,department 字段。$re=$this-&gt;db-&gt;update_batch('database_table_1',$data,'mobile'); 分组统计当需要统计分析每小时/每天/每月/每年的记录时，时常会用到分组统计的功能。12345678910111213141516171819202122232425262728293031323334353637/* 24h内，按小时统计 */$this-&gt;db-&gt;select(&apos;DATE_FORMAT(s.insert_datetime,\&apos;%Y-%m-%d\&apos;) as date,HOUR(s.insert_datetime) as hour,s.status,count(1) as total&apos;);$this-&gt;db-&gt;where(&apos;TIMESTAMPDIFF(HOUR,DATE_FORMAT(s.insert_datetime,\&apos;%Y-%m-%d %H:%m:%s\&apos;),CURTIME())&lt;=24&apos;);$this-&gt;db-&gt;group_by(&apos;s.status,DATE_FORMAT(s.insert_datetime,\&apos;%Y-%m-%d %H\&apos;)&apos;);$this-&gt;db-&gt;order_by(&apos;date&apos;,&apos;ASC&apos;);$result=$this-&gt;db-&gt;get() -&gt;result_array();/* * 结果后处理,显示 count 为0 */$datetime_now = new DateTime();$datetime_old = new DateTime();date_sub($datetime_old, date_interval_create_from_date_string(&quot;23 hours&quot;));for (; $datetime_old-&gt;getTimestamp() &lt;= $datetime_now-&gt;getTimestamp(); date_add($datetime_old, date_interval_create_from_date_string(&quot;1 hours&quot;))) &#123; $status = array(&apos;发送成功&apos;, &apos;发送失败&apos;); foreach ($status as $s) &#123; # 筛选是否存在 $flag = 0; if ($result) &#123; foreach ($result as $key =&gt; $row) &#123; if ($row[&apos;date&apos;] == $datetime_old-&gt;format(&apos;Y-m-d&apos;) AND $row[&apos;hour&apos;] == $datetime_old-&gt;format(&apos;H&apos;) AND $row[&apos;status&apos;] == $s) &#123; $flag = 1; &#125; &#125; &#125; //若不存在,则插入 if (!$flag) &#123; array_push($result, array( &apos;date&apos; =&gt; $datetime_old-&gt;format(&apos;Y-m-d&apos;), &apos;hour&apos; =&gt; strval(intval($datetime_old-&gt;format(&apos;H&apos;))), &apos;status&apos; =&gt; $s, &apos;total&apos; =&gt; 0 )); &#125; &#125;&#125;$result = arraySequence($result, &apos;date&apos;, &apos;SORT_ASC&apos;); 总结都是一些经常用到的东西，记录一下，以后备查~]]></content>
      <categories>
        <category>Code</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>CI</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSR_CUGER 使用教程]]></title>
    <url>%2F2018%2F01%2F28%2FSSR-CUGER-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言本平台仅供地大学子用于学术科研、学业研究，严禁用于非法用途！ 注册账号进入官方网站进行注册(需要邀请码，如无，请联系管理员 Email:cug.xia@gmail.com。 获取 SSR 链接 登录官方网站，进去用户主页后，点击节点列表，即可查看所有可用节点。 选择合适节点，操作-&gt;SSR链接-&gt;完整复制SSR链接 客户端配置SSR在各平台均有相应客户端，在此仅提供两种最常见的客户端配置教程，其它平台请自行搜索解决。 Android 端配置客户端下载Android 端 SSR 客户端下载 客户端配置打开SSR客户端，点击左上角 ShadowsocksR 进入配置文件，点击右下角+，从剪切板导入，即可将节点信息导入。 连接 SSR打开 SSR 软件，选择合适节点，点击右上角飞机，连接 SSR 。 Windows 端配置客户端下载Windows SSR客户端下载 客户端配置SSR 链接导入打开 Shadowsocksr 软件，状态栏寻找飞机图标，右键，从剪切板导入SSR链接，导入成功会弹窗出现SSR链接信息的编辑页面。 客户端其它配置 运行模式：可在直连/ PAC /全局模式进行切换，直连模式相当于没有开 SSR；PAC模式(推荐) 是自动选择，根据PAC配置文件，对不同网址采用不同的处理方案；全局模式则是系统所有网络请求都走 SSR，比较耗费流量而且可能国内网站速度较慢。 PAC配置：根据自身情况，调整 PAC 方案。 负载均衡：默认开启，当存在多个节点可用时，SSR会根据测试情况自动选择您所倾向的节点类型(速度快/延迟低)。 iOS 端配置客户端下载iOS 由于xx原因在 AppStore 中国区已经下架相关软件，需要注册美区账号并登陆美区 App Store 后下载。 注册美区 Apple ID 教程 推荐软件: Shadowrocket、Surge、Wingy等。(部分可能需要付费购买) 连接测试打开浏览器，输入www.google.com，检查是否能访问。 其它资费 本站为让更多用户能够享受福利，推出每月免费1G流量套餐，即每月不用支付任何资费； 套餐内流量，在免费套餐更换付费套餐时，即刻生效，并按当月剩余天数扣除相应的余额，充值相应流量。其它情况下更换套餐将下月生效； 本站所指的月为自然月。 充值用户登录后，点击我的信息即可查看当前余额，并可看到支付宝和微信收款码，扫码并备注id，后台收到后会及时进行充值～ 关于本网站由 Dorad 个人承建与维护，如有侵权或违规，请联系 Email:cug.xia@gmail.com 。]]></content>
      <categories>
        <category>SSR</category>
      </categories>
      <tags>
        <tag>SSR</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
</search>
